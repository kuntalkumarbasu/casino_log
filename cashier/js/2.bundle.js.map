{"version":3,"sources":["webpack:///./resources/js/components/cashier/index/PlayerDetails.js","webpack:///./resources/js/components/cashier/index/PlayerForm.js","webpack:///./resources/js/components/cashier/index/Search.js","webpack:///./resources/js/modules/cashier/search.js"],"names":["PlayerDetails","props","state","deletePlayerData","closetransactionText","logId","setState","formData","Promise","resolve","reject","fetch","SERVER_BASE_URL_FULL","method","headers","body","JSON","stringify","then","response","json","data","getPlayersData","playersdata","user_id","catch","error","alert","user_name","user_phone_number","new_balance","length","map","eachplayersdata","keyplayersdata","cashier_name","moment","collection_time","format","amount_collected","type_of_collection","type_of_payment","Component","PlayerForm","typeofcollectiontext","typeofcollectionvalue","typeofpayment","selectedPlayerId","formsubmiterror","formsubmiterrorClassCode","onChangeCollection","bind","onChangeTypeOfPayment","displayPlayerData","e","currentTarget","value","dataset","text","typeofcollection","errorsCount","document","getElementById","previous_balance","reset","console","log","submit","Search","loaderPlayersData","selectPlayer","player_id","thisParam","players","player","app","parse","render"],"mappings":"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","file":"2.bundle.js","sourcesContent":["import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport moment from 'moment';\n\nclass PlayerDetails extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            deletePlayerData: null,\n            closetransactionText: null,\n        };\n\n    }\n\n\n    deletelog(logId) {\n\n        this.setState({deletePlayerData: 'Deleting data...'});\n\n        const formData = {\n            logId: logId\n        };\n\n        new Promise((resolve, reject) => {\n                fetch(SERVER_BASE_URL_FULL+'search/deletelogdata', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({formData})\n                }).then(response => response.json())\n                    .then((data) => {\n\n                        this.setState({deletePlayerData: null});\n                        this.props.getPlayersData(this.props.playersdata[0].user_id);\n\n                    }).catch(error => {\n                        \n                        alert(\"System Exception\");\n                        reject(error);\n                    });\n        });\n\n        return false;    \n    }\n\n    closetransaction(user_id){\n\n        this.setState({closetransactionText: 'Please wait. Closing transaction for this user.'});\n\n        const formData = {\n            user_id: user_id\n        };\n\n        new Promise((resolve, reject) => {\n                fetch(SERVER_BASE_URL_FULL+'search/closetransaction', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({formData})\n                }).then(response => response.json())\n                    .then((data) => {\n\n                        this.setState({closetransactionText: null});\n                        this.props.getPlayersData(this.props.playersdata[0].user_id, 'Transaction closed for this user.');\n\n                    }).catch(error => {\n                        alert(\"System Exception\");\n                        reject(error);\n                    });\n        });\n\n        return false;    \n\n    }\n\n\n    render() {\n        const {playersdata} = this.props; //uplift relating variable;\n        \n        return (\n            <table width=\"100%\">\n                <tbody>\n                    \n                    <tr>\n                    <td>&nbsp;</td>\n                    </tr>\n                    <tr>\n                        <td>\n                                <table width=\"100%\">\n                                <tbody>\n                                    <tr>\n                                        <td colSpan=\"2\"><h1>{playersdata[0].user_name}'s Log</h1></td>\n                                    </tr>\n                                    <tr>\n                                        <td><h3>Phone No. {playersdata[0].user_phone_number}</h3></td>\n                                        <td><h3>&nbsp;&nbsp;Balance : {playersdata[0].new_balance}</h3></td>\n                                    </tr>\n                                    <tr>\n                                        <td colSpan=\"2\">\n                                                <table width=\"100%\" id=\"players\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td>\n                                                        <table width=\"100%\">\n                                                        <tbody>\n                                                            <tr>\n                                                                <th width=\"20%\">Cashier : </th>\n                                                                <th width=\"20%\">Date</th>\n                                                                <th width=\"20%\">Time</th>\n                                                                <th width=\"20%\">Amount</th>\n                                                                <th width=\"20%\">Collection Type</th>\n                                                                <th width=\"20%\">Payment</th>\n                                                            </tr>\n                                                            \n                                                            {(playersdata !== null && playersdata.length > 0) &&\n                                                                playersdata.map((eachplayersdata, keyplayersdata) => (  \n                                                                    <tr key={`eachuser-${keyplayersdata}`}>\n                                                                        <td width=\"20%\">{eachplayersdata.cashier_name}</td>\n                                                                        <td width=\"20%\">{moment(eachplayersdata.collection_time).format('MM/DD/YYYY')}</td>\n                                                                        <td width=\"20%\">{moment(eachplayersdata.collection_time).format(\"hh:mm a\")} </td>\n                                                                        <td width=\"20%\">{eachplayersdata.amount_collected}</td>\n                                                                        <td width=\"20%\">{eachplayersdata.type_of_collection}</td>\n                                                                        <td width=\"20%\">{eachplayersdata.type_of_payment}</td>\n                                                                        \n                                                                    </tr>\n                                                                ))\n                                                            }\n                                                            \n                                                        </tbody>\n                                                       </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                               </table>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                               </table>\n                        </td>\n                    </tr>\n                    <tr>\n                    <td>&nbsp;</td>\n                    </tr>\n                    <tr>\n                    <td>\n                        {/*<button onClick={() => this.closetransaction(playersdata[0].user_id)} type=\"button\" className=\"submitbutton\">Close Transaction</button> &nbsp; &nbsp; {this.state.closetransactionText} */}\n                    </td>\n                    </tr>\n                    <tr>\n                    <td></td>\n                    </tr>\n                    \n                </tbody>\n            </table>\n        );\n    }\n\n\n}\n\nexport default PlayerDetails;\n","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport moment from 'moment';\n\nclass PlayerForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            typeofcollectiontext: 'Purchasing Chips',\n            typeofcollectionvalue: 'request',\n            typeofpayment: 'ACC',\n            selectedPlayerId: props.selectedPlayerId,\n            formsubmiterror: null,\n            formsubmiterrorClassCode: null,\n        };\n\n        this.onChangeCollection =  this.onChangeCollection.bind(this);\n        this.onChangeTypeOfPayment =  this.onChangeTypeOfPayment.bind(this);\n        this.displayPlayerData =  this.displayPlayerData.bind(this);\n    }\n\n    onChangeCollection(e){ \n\n        var { value, dataset } = e.currentTarget;\n\n        this.setState({typeofcollectiontext : dataset.text, typeofcollectionvalue : value, typeofpayment : dataset.typeofcollection});\n\n    }\n\n    displayPlayerData() { \n        this.props.getPlayersData(this.state.selectedPlayerId);\n    }\n\n    onChangeTypeOfPayment(e){ \n\n        var { value } = e.currentTarget;\n\n        this.setState({typeofpayment : value});\n\n    }\n\n\n    submit() {\n        let errorsCount = 0;\n        this.setState({formsubmiterror : null, formsubmiterrorClassCode : null});\n\n        if(document.getElementById('collection_amount').value == null || document.getElementById('collection_amount').value == '') errorsCount++;\n\n        var previous_balance = 0;\n        if(this.props.playersdata != null)\n            previous_balance = this.props.playersdata[0].new_balance;\n\n        if (errorsCount === 0) {\n            \n            const formData = {\n                'player_id' : this.state.selectedPlayerId,\n                'collection_amount' : document.getElementById('collection_amount').value,\n                'type_of_collection' : this.state.typeofcollectionvalue,\n                'type_of_payment' : this.state.typeofpayment,\n                'notes' : document.getElementById('notes').value,\n                'previous_balance' : previous_balance,\n            };\n\n            new Promise((resolve, reject) => {\n                    fetch(SERVER_BASE_URL_FULL+'search/insertlogdata', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify({formData})\n                    }).then(response => response.json())\n                        .then((data) => {\n                            document.getElementById(\"create-addlog-form\").reset();\n                            this.setState({formsubmiterror : 'Log added successfully', formsubmiterrorClassCode : 'display-success'});\n                            this.displayPlayerData();\n                        }).catch(error => {\n                            console.log(error);\n                        });\n            });\n\n        } else {\n            console.log('error');\n            this.setState({formsubmiterror : 'Please fill all mandatory fields', formsubmiterrorClassCode : 'display-error'});\n        }\n\n        return false;\n    }\n\n\n\n    render() {\n\n        return (\n            <table width=\"100%\">\n                \n                <tbody>\n                {\n                    this.state.formsubmiterror != null ? (<tr>\n                        <td>\n                            <div id={this.state.formsubmiterrorClassCode}>{this.state.formsubmiterror}</div>\n                        </td>\n                    </tr>) : null\n                }\n                    <tr>\n                        <td>\n                            &nbsp;\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                                <form id=\"create-addlog-form\">\n                                <table width=\"100%\">\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                        <table width=\"100%\">\n                                        <tbody>\n                                            <tr>\n                                                <td width=\"20%\">\n                                                <input onChange={this.onChangeCollection} data-typeofcollection=\"ACC\" data-text=\"Purchasing Chips\" checked={this.state.typeofcollectiontext=='Purchasing Chips'} type=\"radio\" name='type_of_collection' id='type_of_collection' value='request' />&nbsp;Purchasing Chips&nbsp;&nbsp; \n                                                <input onChange={this.onChangeCollection} data-typeofcollection=\"CASH\" data-text=\"Cashing Out\" checked={this.state.typeofcollectiontext=='Cashing Out'} type=\"radio\" name='type_of_collection' id='type_of_collection' value='refund' />&nbsp;Cashing Out\n                                                </td>\n                                                \n                                            </tr>\n                                        </tbody>\n                                       </table>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                        <table width=\"100%\">\n                                        <tbody>\n                                            <tr>\n                                                <td width=\"20%\">\n                                                <br />\n                                                \n                                                {this.state.typeofcollectiontext}<span className=\"asterix\" aria-hidden=\"true\">*</span> : <input type=\"number\" step=\"any\" id=\"collection_amount\" />&nbsp;</td>\n                                            </tr>\n                                        </tbody>\n                                       </table>\n                                        </td>\n                                    </tr>\n                                    {\n                                        (this.state.typeofcollectiontext=='Purchasing Chips') ? (\n\n                                            <tr>\n                                                <td>\n                                                <table width=\"100%\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td width=\"20%\">\n                                                        {\n                                                           \n                                                        }\n                                                        <input onChange={this.onChangeTypeOfPayment} type=\"radio\" name='type_of_payment' checked={this.state.typeofpayment=='ACC'} id='type_of_payment' value='ACC' />&nbsp;Credit&nbsp;&nbsp; \n                                                        <input onChange={this.onChangeTypeOfPayment} type=\"radio\" name='type_of_payment' checked={this.state.typeofpayment=='CASH'} id='type_of_payment' value='CASH' />&nbsp;Cash</td>\n                                                    </tr>\n                                                </tbody>\n                                               </table>\n                                                </td>\n                                            </tr>\n\n                                        ) : null \n                                    }\n                                    \n                                    <tr>\n                                        <td>\n                                        <table width=\"100%\">\n                                        <tbody>\n                                            <tr>\n                                                <td width=\"20%\" height=\"60\">\n                                                <br />\n                                                NOTES : <input type=\"text\" id=\"notes\" />\n                                                </td>\n                                                \n                                            </tr>\n                                        </tbody>\n                                       </table>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                        <table width=\"100%\">\n                                        <tbody>\n                                            <tr>\n                                                <td width=\"20%\" height=\"60\">\n                                                <button onClick={(e)=>this.submit()} type=\"button\" className=\"submitbutton\">Add Log</button>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                       </table>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                               </table>\n                               </form>\n                        </td>\n                    </tr>\n                    \n                </tbody>\n            </table>\n        );\n    }\n\n\n}\n\nexport default PlayerForm;\n","import React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nimport PlayerDetails from 'components/cashier/index/PlayerDetails';\nimport PlayerForm from 'components/cashier/index/PlayerForm';\n\nclass Search extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playersdata: null,\n            loaderPlayersData: null,\n            selectedPlayerId: null,\n        };\n\n\n        this.getPlayersData =  this.getPlayersData.bind(this);\n        this.selectPlayer =  this.selectPlayer.bind(this);\n       \n    }\n\n    selectPlayer() {\n\n        this.setState({selectedPlayerId: null, playersdata: null});\n\n        \n        //const { form } = this.state;\n        //form.passenger.title = e.target.value;\n        //this.setState({ form });\n    }\n\n    getPlayersData(player_id, text=''){ \n\n            this.setState({loaderPlayersData: 'Searching results...', playersdata: null});\n\n            this.setState({selectedPlayerId: player_id});\n\n            const formData = {\n                player_id: player_id\n            };\n\n            new Promise((resolve, reject) => {\n                    fetch(SERVER_BASE_URL_FULL+'search/getplayersdetails', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify({formData})\n                    }).then(response => response.json())\n                        .then((data) => {\n\n                            if(data.length == 0){\n                                if(text == '')\n                                    this.setState({loaderPlayersData: 'No logs found'});\n                                else \n                                    this.setState({loaderPlayersData: text});\n                            }\n                            else{\n                               this.setState({playersdata: data});\n                               this.setState({loaderPlayersData: null}); \n                            }\n\n                        }).catch(error => {\n                            \n                            alert(\"System Exception\");\n                            reject(error);\n                        });\n            });\n\n    }\n\n\n    submit(thisParam) { \n            this.getPlayersData(document.getElementById('select_players').value);\n        \n            return false;\n    }\n    render() {\n\n        const { players } = this.props;\n        \n        return (\n            \n                \n                <table width=\"100%\">\n                <tbody>\n                    <tr>\n                        <td>\n                            <select onChange={this.selectPlayer} name=\"select_players\" id=\"select_players\" aria-invalid=\"false\">  \n                                        <option selected=\"\" value=\"\">--Select Player--</option>\n                                {(players !== null && players.length > 0) &&\n                                        players.map(player => {\n                                        \n                                        return (\n                                            <option selected=\"\" key={player.user_id} value={player.user_id}>{player.user_name}</option>\n                                        );\n                                    })\n                                }\n                            </select>\n                        </td>\n                        <td>\n                            <button onClick={(e)=>this.submit()} type=\"button\" className=\"submitbutton\">Apply</button>\n                        </td>\n                    </tr>\n                </tbody>\n                <tbody>\n                    <tr>\n                        <td>\n                           <table width=\"100%\">\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        {\n                                            this.state.selectedPlayerId != null ? (<PlayerForm getPlayersData={this.getPlayersData} playersdata= {this.state.playersdata} selectedPlayerId= {this.state.selectedPlayerId} />) : null\n                                        }\n                                    </td>\n                                    \n                                </tr>\n                            </tbody>\n                            </table>\n                        </td>\n                    </tr>\n                </tbody>\n                <tbody>\n                    <tr>\n                        <td>\n                            {\n                                (this.state.loaderPlayersData != null) ? (<div id=\"display-success\">{this.state.loaderPlayersData}</div>) : ''\n                            }\n                            \n                            {\n                                this.state.playersdata != null ? (<PlayerDetails getPlayersData={this.getPlayersData} playersdata= {this.state.playersdata} />) : null\n                            }\n                            \n                        </td>\n                    </tr>\n                </tbody>\n                </table>    \n                \n                \n            \n\n        );\n    }\n}\n\nexport default Search;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport Search from 'components/cashier/index/Search';\n\nconst app = document.getElementById('page');\n\nif (app !== null) {\n    \n     \n\tconst players = JSON.parse(app.dataset.players);\n\t\n\trender(<Search players={players} />, app);\n}\n\n"],"sourceRoot":""}